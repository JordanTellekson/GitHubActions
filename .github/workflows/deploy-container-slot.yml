name: Build & Deploy Container to Slot
 
on:

  workflow_dispatch:
 
env:

  RG: rg-WebProgramming1-Fall2025-bs

  WEBAPP: wp1-17370703-fa25

  SLOT: container-demo

  ACR_NAME: wp1fa25acr            # no .azurecr.io suffix

  IMAGE_NAME: wp1app              # repo name inside ACR
 
jobs:

  build-and-deploy:

    runs-on: ubuntu-latest

    permissions:

      contents: read

      id-token: write
 
    steps:

      - name: Checkout

        uses: actions/checkout@v4
 
      - name: Azure Login (Service Principal)

        uses: azure/login@v2

        with:

          creds: >

            {"clientId":"${{ secrets.AZURE_CLIENT_ID }}",

             "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",

             "tenantId":"${{ secrets.AZURE_TENANT_ID }}",

             "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"}
 
      # Build from repo root using the project Dockerfile

      - name: Build image (Dockerfile in project directory)

        run: |

          TAG=${{ github.sha }}

          docker build -f deploymentfall25/deploymentfall25/Dockerfile -t $ACR_NAME.azurecr.io/$IMAGE_NAME:$TAG .

          echo "TAG=$TAG" >> $GITHUB_ENV
 
      - name: ACR Login (RBAC)

        run: az acr login --name $ACR_NAME
 
      - name: Push image to ACR

        run: docker push $ACR_NAME.azurecr.io/$IMAGE_NAME:${TAG}
 
      # --- Sanity verifier #1: show the image we just built/pushed ---

      - name: Show image tag

        run: |

          echo "Using image: $ACR_NAME.azurecr.io/$IMAGE_NAME:${TAG}"

          echo "image=$ACR_NAME.azurecr.io/$IMAGE_NAME:${TAG}" >> $GITHUB_STEP_SUMMARY

          # Optional: assert the tag exists in ACR

          az acr repository show-tags -n $ACR_NAME --repository $IMAGE_NAME \

            --query "[?@=='${TAG}']" -o tsv
 
      - name: Point SLOT to new image

        run: |

          az webapp config container set \

            -g $RG -n $WEBAPP --slot $SLOT \

            --docker-custom-image-name $ACR_NAME.azurecr.io/$IMAGE_NAME:${TAG} \

            --docker-registry-server-url https://$ACR_NAME.azurecr.io
 
      # Keep port aligned with ASPNETCORE_URLS=http://+:8080 in your Dockerfile

      - name: Ensure WEBSITES_PORT=8080 on slot

        run: |

          az webapp config appsettings set \

            -g $RG -n $WEBAPP --slot $SLOT \

            --settings WEBSITES_PORT=8080
 
      # --- Sanity verifier #2: confirm the slot is set to that exact tag ---

      - name: Confirm slot container config

        run: |

          az webapp config container show -g $RG -n $WEBAPP --slot $SLOT -o jsonc
 
      - name: Restart slot

        run: az webapp restart -g $RG -n $WEBAPP --slot $SLOT
 